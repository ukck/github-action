name: Build and Push containerelic/github-enterprise-mcp Image

on:
  push:
    branches: [ "main" ]
    # 只在 main 分支有新提交或 merge 时触发
  workflow_dispatch:
    # 支持手动触发

env:
  IMAGE_NAME: github-enterprise-mcp
  REGISTRY: ghcr.io  # GitHub Container Registry

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: 'containerelic/github-enterprise-mcp'
          fetch-depth: 0  # 获取完整的 git 历史，包括所有 tags
          # 如果需要特定分支或标签，可以取消下面的注释并指定
          # ref: 'main'

      - name: Get latest tag and check if current commit is tagged
        id: get_tag
        run: |
          # 获取最新的 tag
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT
          echo "Latest tag: ${latest_tag}"
          
          # 获取当前提交的所有 tags
          current_tags=$(git tag --points-at HEAD)
          echo "Current commit tags: ${current_tags}"
          
          # 检查当前提交是否有 tag（任何 tag）
          if [ -n "${current_tags}" ]; then
            echo "is_tagged_commit=true" >> $GITHUB_OUTPUT
            echo "Current commit is tagged"
            
            # 检查当前提交是否是最新 tag
            if echo "${current_tags}" | grep -q "^${latest_tag}$"; then
              echo "is_latest_tag=true" >> $GITHUB_OUTPUT
              echo "Current commit is the latest tag: ${latest_tag}"
            else
              echo "is_latest_tag=false" >> $GITHUB_OUTPUT
              echo "Current commit has tags but not the latest one"
            fi
          else
            echo "is_tagged_commit=false" >> $GITHUB_OUTPUT
            echo "is_latest_tag=false" >> $GITHUB_OUTPUT
            echo "Current commit is not tagged"
          fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Docker tags
        id: prepare_tags
        run: |
          TAGS="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.get_tag.outputs.latest_tag }}"
          TAGS="${TAGS},${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}"
          
          # 如果当前提交是最新 tag，添加 latest 标签
          if [ "${{ steps.get_tag.outputs.is_latest_tag }}" = "true" ]; then
            TAGS="${TAGS},${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
            echo "Adding latest tag"
          fi
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Generated tags: ${TAGS}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.prepare_tags.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=GitHub Enterprise MCP Server
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/containerelic/github-enterprise-mcp
            org.opencontainers.image.version=${{ steps.get_tag.outputs.latest_tag }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Debug output
        run: |
          echo "Latest tag: ${{ steps.get_tag.outputs.latest_tag }}"
          echo "Is tagged commit: ${{ steps.get_tag.outputs.is_tagged_commit }}"
          echo "Is latest tag: ${{ steps.get_tag.outputs.is_latest_tag }}"
          echo "Final tags: ${{ steps.prepare_tags.outputs.tags }}" 
